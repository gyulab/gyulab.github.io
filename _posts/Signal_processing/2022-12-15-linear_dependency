---
layout: post
title:  "Channel coding analysis utilizing linear dependency"
date:   2022-12-15T14:28:52-05:00
author: Gyujun Jeong
categories: Research@signal
---

![alt text]({{ site.baseurl }}/assets/images/general_research/33.PNG "image"){:.profile}<br>

&nbsp;&nbsp;&nbsp;&nbsp;Linear dependency is a property of a set of vectors that indicates whether the vectors are linearly independent or linearly dependent. In signal analysis, linear dependency is used to determine whether a set of signals or sequences can be expressed as a linear combination of other signals or sequences. For instance, in convolutional coding, a set of encoded symbols can be considered linearly dependent, i.e., correlated, if they can be expressed as a linear combination of other encoded symbols. In this case, linear dependency analysis can be used to determine the encoded type of the symbols.<br>

&nbsp;&nbsp;&nbsp;&nbsp;To perform linear dependency analysis, we can use a variety of methods, such as the RREF (Reduced Row Echelon Form) method or the Gram-Schmidt process. These methods can help to determine whether a set of encoded symbols is linearly independent or linearly dependent, and can also help to identify the encoded type of the symbols. If a set of encoded signals can be expressed as a linear combination of other encoded signals, it is considered linearly dependent.<br>

&nbsp;&nbsp;&nbsp;&nbsp;Assume we use the RREF method to analyze a set of encoded signals and find that the signals are linearly dependent. No matter how many times you apply row operation to the matrix to make it rref, the linear dependency between the column vectors does not change. In addition, it is easy to find linear dependencies between column vectors in rref-ed matrices. Using these properties of rref matrix, we can find the linear dependency of the data.

&nbsp;&nbsp;&nbsp;&nbsp;For example, if we use the RREF method to analyze a set of encoded signals and find that the signals are linearly dependent, it is possible that the signals were encoded using some code, e.g., the Hamming code, or Golay code, since those codes are linear block codes that uses linear combinations of codewords to encode the data. Not only linear block code, the convolutional code also could be analyzed in the same manner.<br>

&nbsp;&nbsp;&nbsp;&nbsp;We can also identify the encoded type by the linear dependency - linear block code or convolutional coded. Since the linear block code uses parity (N-k) X m bits with every K X m bit at encoding, total N X m bits shown subsequently. In contrast, convolutionally encoded one produces (S-k+1) X n, such that k stands for Constraint Length and n is output bit number.


![alt text]({{ site.baseurl }}/assets/images/general_research/32.PNG "image"){:.profile}<br>




- Code<br>

<script src="https://gist.github.com/gyulab/c1a3f6882804071282191f4ffb636952.js"></script>
<br>
  
&nbsp;&nbsp;&nbsp;&nbsp;The code performs row operations to make triangular matrix, i.e., reduced row echelon form(rref). Then, the code finds the linear dependencies among column vectors. In other words, it is to select a few of the column vectors appropriately and find the ones that become the zero vectors. <br>

Suppose we have an input matrix of 300 by 200. Here, the column vectors would be

<center>c_{1}, c_{2}, ..., c_{200}</center>

respectively. We should find the x vector, i.e.,

<center>x_{1},..., x_{200} where c_{1}x_{1}+ ... +c_{200}x_{200} = 0 </center>

&nbsp;&nbsp;&nbsp;&nbsp;By the definition of null space, collecting all corresponding x = (x_{1}, ..., x_{200}) results in the null space of the original 300 by 200 matrix. The program selects the basis of this null space. The number of bases selected in this way becomes a nullity, that is, dimension of the null space. When row operation is performed, data that can analyze channel coding is listed on the left, and the identity matrix is aligned on the far right. The found linear dependency can be approximated as the parity check matrix (H).<br>

![alt text]({{ site.baseurl }}/assets/images/general_research/34.PNG "image"){:.profile}<br>

&nbsp;&nbsp;&nbsp;&nbsp;For instance, if we run the code of linear block encoded data, we can obtain the matrix as above. For the result, we can analyze the parity bits from the obtained codewords. Here, the total number of rows in the above matrix represents the number of parity bits i.e., n-k while the number of columns shows the number of bits in the codeword i.e., n. In this particular example the number of rows is 3, representing total 3 parity bits and the number of columns here is 6 showing n i.e., the total bits in the codeword.<br>


Reference)<br>
https://electronicsdesk.com/linear-block-code.html
